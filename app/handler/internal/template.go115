package internal

import (
	"app/api"
	_ "app/handler/internal/statik"
	"io"
	"log"
	"os"
	"strings"

	"html/template"
	"io/ioutil"
	"net/http"

	"github.com/rakyll/statik/fs"
	"golang.org/x/xerrors"
)

var statikFS http.FileSystem
var tmpls map[string]string

func init() {

	var err error

	statikFS, err = fs.New()
	if err != nil {
		log.Printf("fs.New() error: %+v", err)
	}

	err = load()
	if err != nil {
		log.Printf("template load() error: %+v", err)
	}
}

func load() error {

	tmpls = make(map[string]string)
	err := fs.Walk(statikFS, "/templates/", func(path string, fi os.FileInfo, err error) error {

		r, err := statikFS.Open(path)
		if err != nil {
			return xerrors.Errorf("statik Open() error: %w", err)
		}
		defer r.Close()

		byt, err := ioutil.ReadAll(r)
		if err != nil {
			return xerrors.Errorf("ioutil.ReadAll() error: %w", err)
		}

		tmpls[strings.Replace(path, "/templates", "", 1)] = string(byt)
		return nil
	})

	if err != nil {
		return xerrors.Errorf("fs.Walk() error: %w", err)
	}

	return nil
}

func View(w http.ResponseWriter, dto interface{}, names ...string) error {
	tmpl := template.New(names[0])
	return writeTemplate(w, tmpl, dto, names...)
}

func ViewManage(w http.ResponseWriter, dto interface{}, name string) error {

	funcMap := template.FuncMap{
		"plane":               api.ConvertString,
		"html":                api.ConvertHTML,
		"convertDate":         api.ConvertDate,
		"convertSize":         api.ConvertSize,
		"convertTemplateType": api.ConvertTemplateType,
	}

	tmpl := template.New(api.SiteTemplateName).Funcs(funcMap)
	return writeTemplate(w, tmpl, dto, "manage/layout.tmpl", "manage/"+name)
}

func writeTemplate(w io.Writer, root *template.Template, dto interface{}, names ...string) error {

	var err error
	for _, name := range names {
		root, err = root.Parse(tmpls["/"+name])
		if err != nil {
			return xerrors.Errorf("template Parse() error: %w", err)
		}
	}

	err = root.Execute(w, dto)
	if err != nil {
		return xerrors.Errorf("template Execute() error: %w", err)
	}
	return nil
}

func WriteTemplate(w io.Writer, dto interface{}, names ...string) error {
	root := template.New(names[0])
	return writeTemplate(w, root, dto, names...)
}
